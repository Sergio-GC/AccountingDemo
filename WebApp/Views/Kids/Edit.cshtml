@model DTO.Kid

@{
    ViewData["Title"] = "Edit";
    var allKids = ViewBag.kids as List<DTO.Kid>;
    var availableKids = allKids.Where(k => k.Id != Model.Id).ToList();
}

<h1>Edit</h1>

<h4>Kid</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label asp-for="Name" class="control-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label asp-for="LastName" class="control-label"></label>
                        <input asp-for="LastName" class="form-control" />
                        <span asp-validation-for="LastName" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="BirthDate" class="control-label"></label>
                <input asp-for="BirthDate" class="form-control" type="date" />
                <span asp-validation-for="BirthDate" class="text-danger"></span>
            </div>

            <div class="mt-2" style="display: flex; justify-content: space-between; align-items: center;">
                <h4>Siblings</h4>
                <button class="btn btn-success" type="button" onclick="addSiblingDropdown()">➕</button>
            </div>

            <div class="mt-1" id="siblinglist">
                <!-- List of already current siblings -->
                @foreach (var sibling in Model.Siblings.Where(s => s.ToKidId != Model.Id))
                {
                    <div class="sibling-entry" style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                        <select name="SiblingIds" class="form-control sibling-dropdown">
                            <option value="">--- Select a kid ---</option>
                            @foreach (var kid in availableKids)
                            {
                                <!option value="@kid.Id" @(kid.Id == sibling.ToKidId ? "selected" : "")>@kid.Name</!option>
                            }
                        </select>
                        <button type="button" class="btn btn-danger" onclick="removeDropdown(this)">❌</button>
                    </div>
                }
            </div>

            <div id="siblingDropdownTemplate" style="display: none;">
                <div class="sibling-entry mt-1" style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                    <select name="SiblingIds" class="form-control sibling-dropdown">
                        <option value="">--- Select a kid ---</option>
                        @foreach (var kid in availableKids)
                        {
                            <option value="@kid.Id">@kid.Name</option>
                        }
                    </select>
                    <button type="button" class="btn btn-danger" onclick="removeDropdown(this)">❌</button>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<script>
    function addSiblingDropdown() {
        const template = document.getElementById("siblingDropdownTemplate").innerHTML;
        document.getElementById("siblinglist").insertAdjacentHTML("beforeend", template);
    }

    function removeDropdown(button) {
        button.closest(".sibling-entry").remove();
    }
</script>

<div>
    <a asp-action="Kids">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
