name: Deploy to Raspberry Pi

# Temporarily disabled to focus on Docker build issues
# on:
#   push:
#     branches: [ main, master, Testing ]
#   workflow_dispatch: # Allows manual triggering

on:
  push:
    branches: [ main, master, Testing ]
  workflow_dispatch: # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/Testing')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        docker build -f AccountingDemoAPI/Dockerfile -t accountingdemo-api:latest .
        docker build -f WebApp/Dockerfile -t accountingdemo-webapp:latest .

    - name: Save Docker images as tar files
      run: |
        docker save accountingdemo-api:latest -o api-image.tar
        docker save accountingdemo-webapp:latest -o webapp-image.tar

    - name: Upload Docker images
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: |
          api-image.tar
          webapp-image.tar
        retention-days: 1

    - name: Deploy to Raspberry Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        script: |
          # Create deployment directory
          mkdir -p ~/accountingdemo
          cd ~/accountingdemo
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Remove old images
          docker rmi accountingdemo-api:latest accountingdemo-webapp:latest || true
          
          # Clean up old tar files
          rm -f api-image.tar webapp-image.tar

    - name: Check available files
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Checking for tar files:"
        ls -la *.tar || echo "No tar files found"

    - name: Upload images to Pi
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        source: "api-image.tar,webapp-image.tar"
        target: "~/accountingdemo/"

    - name: Load and start containers on Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        script: |
          cd ~/accountingdemo
          
          # Load Docker images
          docker load -i api-image.tar
          docker load -i webapp-image.tar
          
          # Create production docker-compose if it doesn't exist
          if [ ! -f docker-compose.prod.yml ]; then
            cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            api:
              image: accountingdemo-api:latest
              ports:
                - "5000:80"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
              restart: unless-stopped
          
            webapp:
              image: accountingdemo-webapp:latest
              ports:
                - "8080:80"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
              depends_on:
                - api
              restart: unless-stopped
          EOF
          fi
          
          # Start containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up tar files
          rm -f api-image.tar webapp-image.tar
          
          # Show status
          docker-compose -f docker-compose.prod.yml ps 