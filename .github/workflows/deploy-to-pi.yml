name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main, master]
  workflow_dispatch: # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_REGISTRY: 'zemog1498'
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
        ConnectionStrings__DefaultDb: ${{ secrets.DB_CONNECTION_STRING }}
        ASPNETCORE_ENVIRONMENT: CI
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
        ConnectionStrings__DefaultDb: ${{ secrets.DB_CONNECTION_STRING }}
        ASPNETCORE_ENVIRONMENT: CI
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./AccountingDemoAPI/Dockerfile
        platforms: linux/arm64
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/accounting-api:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/accounting-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push WebApp image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./WebApp/Dockerfile
        platforms: linux/arm64
        push: true
        tags: ${{ env.DOCKER_REGISTRY }}/accounting-webapp:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/accounting-webapp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-pi:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    
    steps:
    - name: Deploy to Raspberry Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        script: |
          # Create deployment directory
          mkdir -p ~/accountingdemo
          cd ~/accountingdemo
          
          # Stop existing containers
          docker compose down || true
          
          # Remove old images to free up space
          docker rmi ${{ env.DOCKER_REGISTRY }}/accounting-api:latest ${{ env.DOCKER_REGISTRY }}/accounting-webapp:latest || true
          rm -rf *
          
          # Pull latest images
          echo "Pulling latest Docker images..."
          docker pull ${{ env.DOCKER_REGISTRY }}/accounting-api:latest
          docker pull ${{ env.DOCKER_REGISTRY }}/accounting-webapp:latest

          # Create a .env file
          install -m 600 /dev/null .env
          echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" > .env
          
          # Create production docker-compose if it doesn't exist
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            api:
              image: ${{ env.DOCKER_REGISTRY }}/accounting-api:latest
              ports:
                - "5000:5000"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:5000
                - ConnectionStrings__DefaultDb=${DB_CONNECTION_STRING}
                - TZ=Europe/Zurich
              restart: unless-stopped
              container_name: accounting-api
              networks:
                - main
          
            webapp:
              image: ${{ env.DOCKER_REGISTRY }}/accounting-webapp:latest
              ports:
                - "8095:8080"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:8080
              depends_on:
                - api
              restart: unless-stopped
              container_name: accounting-webapp
              networks:
                - main
          
          networks:
            main:
              external: true
          EOF
          fi
          
          # Start containers
          docker compose up -d
          
          # Show status
          docker ps -a | grep accounting
          
          echo "Deployment completed successfully!" 