name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main, master]
  workflow_dispatch: # Allows manual triggering

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

  deploy-to-pi:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Raspberry Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        script: |
          # Create deployment directory
          mkdir -p ~/accountingdemo
          cd ~/accountingdemo
          
          # Stop existing containers
          docker compose down || true
          
          # Remove old images
          docker rmi accountingdemo-api:latest accountingdemo-webapp:latest || true
          
          # Clean up old files
          rm -rf *
          
          echo "Ready to receive source code..."

    - name: Upload source code to Pi
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        source: "."
        target: "~/accountingdemo/"

    - name: Build and deploy on Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PI_HOST }}
        username: ${{ secrets.PI_USERNAME }}
        key: ${{ secrets.PI_SSH_KEY }}
        port: ${{ secrets.PI_PORT }}
        script: |
          cd ~/accountingdemo
          
          echo "Building Docker images on Pi..."
          
          # Build API image
          docker build -f AccountingDemoAPI/Dockerfile -t accountingdemo-api:latest .
          echo "API image built successfully!"
          
          # Build WebApp image
          docker build -f WebApp/Dockerfile -t accountingdemo-webapp:latest .
          echo "WebApp image built successfully!"
          
          # Create production docker-compose if it doesn't exist
          if [ ! -f docker-compose.yml ]; then
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            api:
              image: accountingdemo-api:latest
              ports:
                - "5000:5000"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:5000
              restart: unless-stopped
              container_name: accounting-api
              networks:
                - main
          
            webapp:
              image: accountingdemo-webapp:latest
              ports:
                - "8095:8080"
              environment:
                - ASPNETCORE_ENVIRONMENT=Production
                - ASPNETCORE_URLS=http://+:8080
              depends_on:
                - api
              restart: unless-stopped
              container_name: accounting-webapp
              networks:
                - main
          
          networks:
            main:
              external: true
          EOF
          fi
          
          # Start containers
          docker compose up -d
          
          # Show status
          docker status | grep accounting
          
          echo "Deployment completed successfully!" 